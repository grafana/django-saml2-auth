name: deploy

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
  test:
    name: Test and build django-saml2-auth
    runs-on: ubuntu-latest
    strategy:
      matrix:
        versions:
          - { "djangoVersion": "4.2.15", "pythonVersion": "3.10" }
          - { "djangoVersion": "4.2.15", "pythonVersion": "3.11" }
          - { "djangoVersion": "4.2.15", "pythonVersion": "3.12" }
          - { "djangoVersion": "5.0.8", "pythonVersion": "3.10" }
          - { "djangoVersion": "5.0.8", "pythonVersion": "3.11" }
          - { "djangoVersion": "5.0.8", "pythonVersion": "3.12" }
        poetry-version: ["1.8.3"]
    permissions:
      id-token: write
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Set up Python 🐍
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.versions.pythonVersion }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install xmlsec1 📦
        run: sudo apt-get install xmlsec1
      - name: Install dependencies 📦
        run: |
          python -m pip install poetry
          poetry install --with dev
      - name: Install Django ${{ matrix.versions.djangoVersion }} 📦
        run: pip install Django==${{ matrix.versions.djangoVersion }}
      - name: Check types, syntax and duckstrings 🦆
        run: |
          poetry run mypy --explicit-package-bases .
          poetry run ruff check .
          poetry run interrogate --ignore-init-module --quiet --fail-under=95 .
      - name: Test Django ${{ matrix.versions.djangoVersion }} with coverage 🧪
        run: poetry run coverage run --source=django_saml2_auth -m pytest . && poetry run coverage lcov -o coverage.lcov
      - name: Submit coverage report to Coveralls 📈
        if: ${{ success() }}
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage.lcov
      - name: Build the binary and source packages 🏗️
        run: poetry build
      - name: Generate CycloneDX SBOM artifacts 📃
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        run: |
          poetry run cyclonedx-py poetry --all-extras --of JSON -o django-saml2-auth-${{ github.ref_name }}.cyclonedx.json
      - name: Publish package to PyPI 🎉
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Create release and add artifacts 🚀
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/*.whl
            django-saml2-auth-${{ github.ref_name }}.cyclonedx.json
          draft: false
          prerelease: false
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
